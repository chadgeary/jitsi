---
- name: jitsi
  hosts: "{{ target }}"
  gather_facts: true
  tasks:

    - name: Set container_command = docker for el7/debian
      set_fact:
        container_command: docker
      when:
        - (ansible_os_family == 'RedHat' and ansible_distribution_major_version == "7") or ansible_os_family == 'Debian'

    - name: EPEL for RPM-Based Machines
      package:
        name: epel-release
        state: present
      when:
        - ansible_os_family == 'RedHat'

    - name: Install Required Packages
      package:
        name:
          - git
          - docker-compose
          - "{% if ansible_os_family == 'RedHat' %}{{ container_command }}{% elif ansible_os_family == 'Debian' %}docker.io{% endif %}"
        state: present

    - name: Determine if Docker daemon.json is default
      shell:
        cmd: grep '{}' /etc/docker/daemon.json
      when: ansible_os_family == 'RedHat' and ansible_distribution_major_version == "7"
      ignore_errors: True
      register: docker_daemon

    - name: Set docker_daemon fact if not RedHat EL7
      set_fact:
        docker_daemon.rc == 1
      when: (ansible_os_family == 'RedHat' and ansible_distribution_major_version != "7") or ansible_os_family == 'Debian'

    - name: Set Docker Daemon (Group)
      copy:
        src: el7.daemon.json
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: '0644'
        backup: yes
      when: docker_daemon.rc == 0
      register: docker_daemon_file

    - name: Docker Service
      systemd:
        name: docker
        state: restarted
        enabled: True
      when:
        - (ansible_os_family == 'RedHat' and ansible_distribution_major_version == "7") or ansible_os_family == 'Debian'
        - docker_daemon_file.changed

    - name: Jitsi User
      user:
        name: jitsi
        state: present
        home: /opt/jitsi
        createhome: yes
      register: jitsi_user

    - name: Jitsi User in dockerroot (EL 7)
      user:
        name: jitsi
        append: yes
        groups: dockerroot
      when:
        - (ansible_os_family == 'RedHat' and ansible_distribution_major_version == "7")

    - name: Jitsi Directory
      file:
        path: "/opt/{{ item }}"
        state: directory
        owner: jitsi
        group: jitsi
        mode: '0750'
      with_items:
        - jitsi

    - name: Clone the Jitsi Meet Docker Repository
      git:
        repo: 'https://github.com/jitsi/docker-jitsi-meet'
        dest: /opt/jitsi_repo

    - name: Determine Jitsi First_Run
      stat:
        path: /opt/jitsi/first_run
      register: first_run
      ignore_errors: True

    - name: Create First_Run if not exists
      file:
        path: /opt/jitsi/first_run
        state: touch
        owner: jitsi
        group: jitsi
        mode: '0400'
      when: first_run.stat.exists|bool == False

    - name: Sync Jitsi Repo to Jitsi Directory
      synchronize:
        src: /opt/jitsi_repo/
        dest: /opt/jitsi
      become: yes
      become_user: jitsi
      when: first_run.stat.exists|bool == False

    - name: Copy Environment File
      copy:
        src: /opt/jitsi/env.example
        dest: /opt/jitsi/.env
        owner: jitsi
        group: jitsi
        mode: '0440'
      become: yes
      become_user: jitsi
      when: first_run.stat.exists|bool == False

    - name: Generate Passwords
      shell:
        cmd: /opt/jitsi/gen-passwords.sh
        chdir: /opt/jitsi/
        executable: /bin/bash
      become: yes
      become_user: jitsi
      when: first_run.stat.exists|bool == False

    - name: Create Jitsi subdirectories
      file:
        path: "{{ item }}"
        state: directory
        owner: jitsi
        group: jitsi
        mode: '0750'
      with_items:
        - /opt/jitsi/.jitsi-meet-cfg
        - /opt/jitsi/.jitsi-meet-cfg/letsencrypt
        - /opt/jitsi/.jitsi-meet-cfg/transcripts
        - /opt/jitsi/.jitsi-meet-cfg/prosody
        - /opt/jitsi/.jitsi-meet-cfg/jicofi
        - /opt/jitsi/.jitsi-meet-cfg/jvb
        - /opt/jitsi/.jitsi-meet-cfg/jigasi
        - /opt/jitsi/.jitsi-meet-cfg/jibri

    - name: Create Jitsi web subdirectory
      file:
        path: "{{ item }}"
        state: directory
        owner: jitsi
        group: jitsi
        mode: '0755'
      with_items:
        - /opt/jitsi/.jitsi-meet-cfg/web

    - name: Fix jitsi web config dir permission
      lineinfile:
        line: "{{ item }}"
        path: /opt/jitsi/web/Dockerfile
      with_items:
        - 'RUN chmod 755 /config'

    - name: Determine Jitsi Admin Pass Created
      stat:
        path: /opt/jitsi/admin_pass
      register: jitsi_admin_pass_file

    - name: Generate Jitsi Admin Pass
      shell: |
        head /dev/urandom | tr -dc A-Za-z0-9 | head -c 20 > /opt/jitsi/admin_pass
      become: yes
      become_user: jitsi
      when: jitsi_admin_pass_file.stat.exists|bool == False

    - name: Register Jitsi Admin Pass
      shell: |
        cat /opt/jitsi/admin_pass
      register: jitsi_admin_pass

    - name: Enable Auth
      replace:
        path: /opt/jitsi/.env
        regexp: '#ENABLE_AUTH=.*'
        replace: 'ENABLE_AUTH=1'

    - name: Enable Guests
      replace:
        path: /opt/jitsi/.env
        regexp: '#ENABLE_GUESTS=.*'
        replace: 'ENABLE_GUESTS=1'

    - name: Set Auth Type = Internal
      replace:
        path: /opt/jitsi/.env
        regexp: '#AUTH_TYPE=.*'
        replace: 'AUTH_TYPE=internal'

    - name: Lets Encrypt (Optional Flag) - Enable
      replace:
        path: /opt/jitsi/.env
        regexp: '#ENABLE_LETSENCRYPT=1'
        replace: 'ENABLE_LETSENCRYPT=1'
      when: le_enable|bool == True

    - name: Lets Encrypt (Optional Flag) - Domain
      replace:
        path: /opt/jitsi/.env
        regexp: '^#LETSENCRYPT_DOMAIN=.*'
        replace: "LETSENCRYPT_DOMAIN={{ le_domain }}"
      when: le_enable|bool == True

    - name: Lets Encrypt (Optional Flag) - Email
      replace:
        path: /opt/jitsi/.env
        regexp: '^#LETSENCRYPT_EMAIL=.*'
        replace: "LETSENCRYPT_EMAIL={{ le_email }}"
      when: le_enable|bool == True

    - name: Lets Encrypt (Optional Flag) - Web Port 80
      replace:
        path: /opt/jitsi/.env
        regexp: '^HTTP_PORT=.*'
        replace: 'HTTP_PORT=80'
      when: le_enable|bool == True

    - name: Lets Encrypt (Optional Flag) - Web Port 443
      replace:
        path: /opt/jitsi/.env
        regexp: '^HTTPS_PORT=.*'
        replace: 'HTTPS_PORT=443'
      when: le_enable|bool == True

    - name: Build Jitsi
      shell:
        cmd: docker-compose up -d
        chdir: /opt/jitsi
      become: yes
      become_user: jitsi

    - name: Add Admin User
      shell: |
        {{ container_command }} exec jitsi_prosody_1 prosodyctl --config /config/prosody.cfg.lua register admin meet.jitsi {{ jitsi_admin_pass.stdout }}
      become: yes
      become_user: jitsi
